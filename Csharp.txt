
0.0 Documentação: https://learn.microsoft.com/pt-pt/dotnet/csharp/

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1.0 Tipos de arquivos base em C#:

   Ao contrário de certas linguagens o C# precisa de um código base
   para se programar.
   
   O codigo necessita de pertencer a uma classe, e possui um método Main.
   Mesmo assim o código inicial que é necessário varia de acordo com a sua implementação.


         using System; //NameSpace ou Módulo System
         
         class Principal{
            static void Main()//Metodo{

               //Aqui escreve o codigo dentro das chaves
               
            }
         }

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.0 Estrutura de um projeto:

   Todos os projetos em C# trabalhandos no VScode possuem em 
   geral certas características em comum.

   Pasta(Nome:basic)
     |-----> index.cs (.Cs = Csharp ou C#)
               |-----> index.exe (E o arquivo ".cs" compilado 
                                                para executável)

   Dentro do Arquivo.cs você programa/cria o seu código
   Dentro do Arquivo.exe você ver o programa (executa o código)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.0 Execução pelo Terminal e VScode:

   O terminal do windows e o terminal existente no VScode e o mesmo.
   Dessa maneira pode ser utilizado para executar o código.

   Ao utilizar o terminal é necessário a compilação é depois a execução


      PS C:\Users\Doc\C-> cd basic
      PS C:\Users\Doc\C-\basic> dir


         Diretório: C:\Users\Doc\C-\basic


      Mode                 LastWriteTime         Length Name
      ----                 -------------         ------ ----
      -a----        07/05/2024     15:23            186 index.cs
      -a----        02/05/2024     23:40           3584 index.exe


      PS C:\Users\Doc\C-\basic> ./index

      Hello World!

      cd = Permite navegar entre diretórios no sistema de arquivos. Por exemplo, "cd C:\Pasta"
      dir = Permite você ver o que está dentro do diretório
      .\ = e dentro dela existirem os arquivos "index.cs" e "index.exe", ao digitar "./index" no terminal, ele tentará executar o arquivo "index" que estiver marcado como executável.
            
            "No entanto, se ambos "index.cs" e "index.exe" existirem e estiverem 
            marcados como executáveis, é importante saber que o sistema dará preferência 
            para o tipo de arquivo que ele consegue executar diretamente. Por exemplo, se 
            "index.exe" for um executável Windows e "index.cs" for um arquivo de código fonte C#, 
            o sistema pode executar "index.exe" mesmo se você digitar "./index"."
      cd.. =  caso queira voltar de diretorio 
   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4.0 Fundamentos do C#:

   SEMPRE COLOCAR O ";" 
   Conceitos básicos do C# como Saídas, Entradas, Dados, Conversões, ...


4.1 Saidas(Output) Write e WriteLine:
   É chamado de saída todos os dados que são mostrados no terminal. 
      Para um código C# executar a saída de um dado existem duas funções para isso:
      ° WriteLine() 
      ° Write() 
      Em outras linguagens ex:Python seria o print("hello world")

      --------------------------------------
      Console.Write("Olá, Mundo!")
      
      Console = É uma classe que representa a entrada e saída padrão do 
      console no sistema operacional. Permite interagir com o console, 
      escrevendo ou lendo dados.

      Write=  É um método da classe Console que escreve texto no console.
      
      --------------------------------------------
      
      Console.WriteLine("Olá, mundo");

      E a mesma coisa do Console.Write mas tem quebra de linha
      sendo A mensagem dentro das aspas e vai para linha de baixo
        
         Console.WriteLine("Olá, mundo");
         Console.Write("Voltemos!"); 

         resposta: 
            Olá, mundo
            Voltemos!

      ---------------------------------------------

4.1.1  Formatação de saída:    

   É possível alterara a maneira como um texto é mostrado no terminal utilizando
   os escape sequence.

   Os escape sequence são pequenos comandos colocados dentro da string
   que irão alterar a string no ponto onde são colocados.

      Console.Write("Hello, "\t" World!");

      resposta = Hello,   World!

       
       Mais Sobre Formatação de Saídas (E complicado de entender)
       https://pt.stackoverflow.com/questions/116497/car%C3%A1cteres-de-escape#:~:text=Sequ%C3%AAncias%20de%20escape%20em%20ASCII,para%20o%20outro%2C%20por%20exemplo.&text=Sequ%C3%AAncia%20de%20escape%20%C3%A9%20uma,ou%20seja%2C%20sequ%C3%AAncia%20de%20escape.&text=Espero%20ter%20ajudado.
       https://learn.microsoft.com/en-us/cpp/c-language/escape-sequences?view=msvc-170
   
         ----------------------------------------------

4.2 Variáveis e Tipos de dados

   Doc:
   https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types
   https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types

   Na programação são utilizados diversos tipos de valores,
   valores ficam guardados numa posição da memória.

   Cada valor que é trabalhado em C# pode ficar guardado em numa variável.

   Declaração de Variáveis

   tipo nome = valor

      tipo =  Os tipos de Variáveis são divididos em "cinco" tipos

         1° Tipos Numéricos Integrais:

            - int : Inteiro de 32 bits com sinal. Ex: "int idade = 25;"
            - long : inteiro de 64 bits com sinal Ex: "long populacao = 7896541230;"
            - short : Inteiro de 16 bits com sinal. Ex: "short temperatura = -10;"
            - byte : Inteiro de 8 bits sem sinal. Ex: "byte niveisDeCinza = 128;"

         2° Tipos Numéricos de Ponto Flutuante:

            -  float : Número de ponto flutuante de precisão simples. Ex: "float altura = 1.75f;"  
            -  double : Número de ponto flutuante de precisão dupla. Ex: "double pi =3;14159265359;"
            -  decimal : Número decimal de alta precisão. Ex: "decimal preco = 19.99m;"

         3° Tipos Booleano:

            - bool: Armazena um único caractere Unicode. Ex: "bool estachovendo = true; "

         4° Tipo Caractere:

            - char : Armazena um único caractere Unicode. Ex: "char letras = 'A'; "
         
         5° Tipo String: 

            - string : Sequência de caractere Unicode. Ex: "string nome = "Maria" ; "

         Ex:

            tipoDaVariavel nomeDaVariavel = valorInicial;

            #######################

            int idade = 30;
            string nome = "João";
            bool estaChovendo = false;

            #########################

            string var1 = "Hello, World";
            Console.WriteLine(var1);

            ###########################

4.3 Leitura Sequencial 
            
   Todos os programas possuem uma ordem padrão de execução das instruções
   Na programação a leitura padrão de um código é a sequencial. 
      Ex:
         Intrução1 -> Intrução2 -> Intrução3  

         using System;

         class Program{
            static void Main(){
               //Leitura Sequencial

               Console.WriteLine("Olha, mund") //Intrução1
               Console.WriteLine("Outra coisa") //Intrução2
               Console.WriteLine("Mais bosta") //Intrução3

            }
         }

         resultado:
         Olha, mund
         Outra coisa
         Mais bosta

      ----------------------------------------------------

         using System;

         class Program{
            static void Main(){
            //Leitura Sequencial

               Console.WriteLine(num) //Ele não vai ler a variavel pois não existe nas linhas a cima dele
               int num =20;// essa variável deveria está a cima do "Console.WriteLine()" para seguir uma sequência

            }
         }

      resultado:
         error CS0841: Não é possível usar a variável local 'num' antes de declará-la


      --------------------------------------------------------------------------------------

4.4 Operadores Aritméticos:            

   Na programação são utilizado diversos simbolos para diversas coisas.
   Os operadores aritméticos são todos os operadores que nos auxiliam na execução de expressões aritméticas.

      Ex: +, -, /, ++, --, %

      Adição (+), Subtração (-), Multiplicação (*),
      Divisão (/), Módulo (%), Incremento (++), Decremento (--)

      ex:

         using System;

         class Program
         {
            static void Main(string[] args)
            {
                  int a = 10;
                  int b = 3;
                  
                  int soma = a + b;
                  int subtracao = a - b;
                  int multiplicacao = a * b;
                  int divisao = a / b;
                  int modulo = a % b;

                  Console.WriteLine("Soma: " + soma);             // Saída: 13
                  Console.WriteLine("Subtração: " + subtracao);   // Saída: 7
                  Console.WriteLine("Multiplicação: " + multiplicacao); // Saída: 30
                  Console.WriteLine("Divisão: " + divisao);       // Saída: 3
                  Console.WriteLine("Módulo: " + modulo);         // Saída: 1

                  a++; // Incremento
                  b--; // Decremento

                  Console.WriteLine("Incremento de a: " + a);     // Saída: 11
                  Console.WriteLine("Decremento de b: " + b);     // Saída: 2
            }
         }

   Resultado:

         Soma: 13
         Subtração: 7
         Multiplicação: 30
         Divisão: 3
         Módulo: 1
         Incremento de a: 11
         Decremento de b: 2

      -------------------------------------------------------------------------------------------------

4.5 Obtendo Entradas de Usuario: 
   Como visto um programa é um conjunto de saida e entradas de dados.
   É possivél também ler e obter uma entrada do usuario que está a executar o programa.

      Input -> Algoritimo -> Output

   Em C#, você pode obter entradas do usuário usando o método "Console.ReadLine()", 
   que lê uma linha de entrada do console como uma string. Em seguida, você pode converter 
   essa string para o tipo de dado desejado, como int, double, entre outros.

   using System;

   class Program{
      static void Main(){
         Console.WriteLine("Digite Algo:");
         Console.ReadLine();
      }
  }

   Resultado
   Digite Algo:
   Algo
   
   ------------------------------------------------------------------------

4.6 Conversão de Tipos de Dados:

   Todas as entradas obtidas pelo usuário são do tipo string.
   Em C# é possível converter o tipo de dado através de dois tipos de conversões:

      ° Conversões Implicitas
      ° Conversões Explicitas 

      Dados do maior para menor Ex:
         double > float > long > int > char 
      
      ° Conversões Implicitas:
         Se a conversão for de um tipo menor para maior.
            Ex: int > long
         
      ° Conversões Explicitas:
         Se a conversão é de um tipo Maior para menor.
            Ex: double > int 
         Vai usar o TypeCast, typecasting em C# é uma prática comum e importante para a 
         manipulação de dados e integração de diferentes tipos de 
         dados em seu código. Entender quando e como usar conversões 
         implícitas e explícitas pode ajudar a prevenir erros e 
         melhorar a eficiência do código.

            A expecificação do tipo de dado entre parentes (int)

         Ex:
            using System; 

            class Program{
               static void Main(){
                  //double > float > long > int > char

                  //Implicita -> do menor para maior

                        int num1 = 20;
                        float num2 = num1;
                        Console.WriteLine(num2);
                        
                  //Explicita -> do maior para menor

                        float n1 = 20.5f;
                        int n2 = (int)n1; //TypeCast
                        Console.WriteLine(n2);
               }
            }
            

   --------------------------------------------------------------------------------------------------

4.6.1 Metódos para Conversão:
   https://learn.microsoft.com/en-us/dotnet/api/system.convert?view=net-8.0
      using System;

      class Program{
         static void Main(){
            //Metodos para Conversão
            
            string t1 = "3";
            int n1 = Convert.ToInt32(t1);
            Console.WriteLine(t1);
            Console.WriteLine(n1);
         }
      }
   
      


